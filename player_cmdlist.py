cmdlist_dict = {'af_add': {'command': 'af_add',
            'comment': 'MPlayer command: af_add String\nMPlayer doc:\naf_add <filter_arguments_list>  (comma separated list of audio filters with parameters)\nexperimental) Load the given list of audio filters.\n',
            'pycommand': 'af_add(<str>)',
            'types': ['str']},
 'af_clr': {'command': 'af_clr',
            'comment': 'MPlayer command: af_clr\nMPlayer doc: af_clr\nexperimental) Unload all loaded audio filters.\n',
            'pycommand': 'af_clr()',
            'types': []},
 'af_cmdline': {'command': 'af_cmdline',
                'comment': 'MPlayer command: af_cmdline String String\nMPlayer doc: af_cmdline <filter_name> <filter_arguments>\nexperimental) Send new command-line options to a filter with the given name.\n',
                'pycommand': 'af_cmdline(<str>, <str>)',
                'types': ['str', 'str']},
 'af_del': {'command': 'af_del',
            'comment': "MPlayer command: af_del String\nMPlayer doc: af_del <filter_name_list> (comma separated list of audio filter's names)\nexperimental) Unload the first occurrence of the filters, if loaded.\n",
            'pycommand': 'af_del(<str>)',
            'types': ['str']},
 'af_switch': {'command': 'af_switch',
               'comment': 'MPlayer command: af_switch String\nMPlayer doc: af_switch <filter_arguments_list> (comma separated list of audio filters with parameters)\nexperimental) Remove all the audio filters and replace them with the given list.\n',
               'pycommand': 'af_switch(<str>)',
               'types': ['str']},
 'alt_src_step': {'command': 'alt_src_step',
                  'comment': 'MPlayer command: alt_src_step Integer\nMPlayer doc: alt_src_step <value> (ASX playlist only)\nhen more than one source is available it selects the next/previous one.\n',
                  'pycommand': 'alt_src_step(<int>)',
                  'types': ['int']},
 'ass_use_margins': {'command': 'ass_use_margins',
                     'comment': 'MPlayer command: ass_use_margins [Integer]',
                     'pycommand': 'ass_use_margins([<int>])',
                     'types': ['int']},
 'audio_delay': {'command': 'audio_delay',
                 'comment': 'MPlayer command: audio_delay Float [Integer]\nMPlayer doc: audio_delay <value> [abs]\net/adjust the audio delay.\nf [abs] is not given or is zero, adjust the delay by <value> seconds.\nf [abs] is nonzero, set the delay to <value> seconds.\n',
                 'pycommand': 'audio_delay(<float>[, <int>])',
                 'types': ['float', 'int']},
 'balance': {'command': 'balance',
             'comment': 'MPlayer command: balance Float [Integer]',
             'pycommand': 'balance(<float>[, <int>])',
             'types': ['float', 'int']},
 'brightness': {'command': 'brightness',
                'comment': 'MPlayer command: brightness Integer [Integer]\nMPlayer doc: brightness <value> [abs]\net/adjust video parameter.\nf [abs] is not given or is zero, modifies parameter by <value>.\nf [abs] is non-zero, parameter is set to <value>.\nvalue> is in the range [-100, 100].\n',
                'pycommand': 'brightness(<int>[, <int>])',
                'types': ['int', 'int']},
 'capturing': {'command': 'capturing',
               'comment': 'MPlayer command: capturing\nMPlayer doc: capturing [value]\noggle/set capturing the primary stream like -dumpstream.\nequires the -capture parameter to be given.\n',
               'pycommand': 'capturing()',
               'types': []},
 'change_rectangle': {'command': 'change_rectangle',
                      'comment': 'MPlayer command: change_rectangle Integer Integer\nMPlayer doc: change_rectangle <val1> <val2>\nhange the position of the rectangle filter rectangle.\n   <val1>\n       Must be one of the following:\n           0 = width\n           1 = height\n           2 = x position\n           3 = y position\n   <val2>\n       If <val1> is 0 or 1:\n           Integer amount to add/subtract from the width/height.\n           Positive values add to width/height and negative values\n           subtract from it.\n       If <val1> is 2 or 3:\n           Relative integer amount by which to move the upper left\n           rectangle corner. Positive values move the rectangle\n           right/down and negative values move the rectangle left/up.\n',
                      'pycommand': 'change_rectangle(<int>, <int>)',
                      'types': ['int', 'int']},
 'contrast': {'command': 'contrast',
              'comment': 'MPlayer command: contrast Integer [Integer]\nMPlayer doc: contrast <value> [abs]\net/adjust video parameter.\nf [abs] is not given or is zero, modifies parameter by <value>.\nf [abs] is non-zero, parameter is set to <value>.\nvalue> is in the range [-100, 100].\n',
              'pycommand': 'contrast(<int>[, <int>])',
              'types': ['int', 'int']},
 'dvb_set_channel': {'command': 'dvb_set_channel',
                     'comment': 'MPlayer command: dvb_set_channel Integer Integer\nMPlayer doc: dvb_set_channel <channel_number> <card_number>\net DVB channel.\n',
                     'pycommand': 'dvb_set_channel(<int>, <int>)',
                     'types': ['int', 'int']},
 'dvdnav': {'command': 'dvdnav',
            'comment': 'MPlayer command: dvdnav String\nMPlayer doc: dvdnav <button_name>\nress the given dvdnav button.\n   up\n   down\n   left\n   right\n   menu\n   select\n   prev\n   mouse\n',
            'pycommand': 'dvdnav(<str>)',
            'types': ['str']},
 'edl_mark': {'command': 'edl_mark',
              'comment': 'MPlayer command: edl_mark\nMPlayer doc: edl_mark\nrite the current position into the EDL file.\n',
              'pycommand': 'edl_mark()',
              'types': []},
 'forced_subs_only': {'command': 'forced_subs_only',
                      'comment': 'MPlayer command: forced_subs_only [Integer]\nMPlayer doc: forced_subs_only [value]\noggle/set forced subtitles only.\n',
                      'pycommand': 'forced_subs_only([<int>])',
                      'types': ['int']},
 'frame_drop': {'command': 'frame_drop',
                'comment': 'MPlayer command: frame_drop [Integer]\nMPlayer doc: frame_drop [value]\noggle/set frame dropping mode.\n',
                'pycommand': 'frame_drop([<int>])',
                'types': ['int']},
 'frame_step': {'command': 'frame_step',
                'comment': 'MPlayer command: frame_step\nMPlayer doc: frame_step\nlay one frame, then pause again.\n',
                'pycommand': 'frame_step()',
                'types': []},
 'gamma': {'command': 'gamma',
           'comment': 'MPlayer command: gamma Integer [Integer]\nMPlayer doc: gamma <value> [abs]\net/adjust video parameter.\nf [abs] is not given or is zero, modifies parameter by <value>.\nf [abs] is non-zero, parameter is set to <value>.\nvalue> is in the range [-100, 100].\n',
           'pycommand': 'gamma(<int>[, <int>])',
           'types': ['int', 'int']},
 'get_audio_bitrate': {'command': 'get_audio_bitrate',
                       'comment': 'MPlayer command: get_audio_bitrate\nMPlayer doc: get_audio_bitrate\nrint out the audio bitrate of the current file.\n',
                       'pycommand': 'get_audio_bitrate()',
                       'types': []},
 'get_audio_codec': {'command': 'get_audio_codec',
                     'comment': 'MPlayer command: get_audio_codec\nMPlayer doc: get_audio_codec\nrint out the audio codec name of the current file.\n',
                     'pycommand': 'get_audio_codec()',
                     'types': []},
 'get_audio_samples': {'command': 'get_audio_samples',
                       'comment': 'MPlayer command: get_audio_samples\nMPlayer doc: get_audio_samples\nrint out the audio frequency and number of channels of the current file.\n',
                       'pycommand': 'get_audio_samples()',
                       'types': []},
 'get_file_name': {'command': 'get_file_name',
                   'comment': 'MPlayer command: get_file_name\nMPlayer doc: get_file_name\nrint out the name of the current file.\n',
                   'pycommand': 'get_file_name()',
                   'types': []},
 'get_meta_album': {'command': 'get_meta_album',
                    'comment': "MPlayer command: get_meta_album\nMPlayer doc: get_meta_album\nrint out the 'Album' metadata of the current file.\n",
                    'pycommand': 'get_meta_album()',
                    'types': []},
 'get_meta_artist': {'command': 'get_meta_artist',
                     'comment': "MPlayer command: get_meta_artist\nMPlayer doc: get_meta_artist\nrint out the 'Artist' metadata of the current file.\n",
                     'pycommand': 'get_meta_artist()',
                     'types': []},
 'get_meta_comment': {'command': 'get_meta_comment',
                      'comment': "MPlayer command: get_meta_comment\nMPlayer doc: get_meta_comment\nrint out the 'Comment' metadata of the current file.\n",
                      'pycommand': 'get_meta_comment()',
                      'types': []},
 'get_meta_genre': {'command': 'get_meta_genre',
                    'comment': "MPlayer command: get_meta_genre\nMPlayer doc: get_meta_genre\nrint out the 'Genre' metadata of the current file.\n",
                    'pycommand': 'get_meta_genre()',
                    'types': []},
 'get_meta_title': {'command': 'get_meta_title',
                    'comment': "MPlayer command: get_meta_title\nMPlayer doc: get_meta_title\nrint out the 'Title' metadata of the current file.\n",
                    'pycommand': 'get_meta_title()',
                    'types': []},
 'get_meta_track': {'command': 'get_meta_track',
                    'comment': "MPlayer command: get_meta_track\nMPlayer doc: get_meta_track\nrint out the 'Track Number' metadata of the current file.\n",
                    'pycommand': 'get_meta_track()',
                    'types': []},
 'get_meta_year': {'command': 'get_meta_year',
                   'comment': "MPlayer command: get_meta_year\nMPlayer doc: get_meta_year\nrint out the 'Year' metadata of the current file.\n",
                   'pycommand': 'get_meta_year()',
                   'types': []},
 'get_percent_pos': {'command': 'get_percent_pos',
                     'comment': 'MPlayer command: get_percent_pos\nMPlayer doc: get_percent_pos\nrint out the current position in the file, as integer percentage [0-100).\n',
                     'pycommand': 'get_percent_pos()',
                     'types': []},
 'get_property': {'command': 'get_property',
                  'comment': 'MPlayer command: get_property String\nMPlayer doc: get_property <property>\nrint out the current value of a property.\n',
                  'pycommand': 'get_property(<str>)',
                  'types': ['str']},
 'get_sub_visibility': {'command': 'get_sub_visibility',
                        'comment': 'MPlayer command: get_sub_visibility\nMPlayer doc: get_sub_visibility\nrint out subtitle visibility (1 == on, 0 == off).\n',
                        'pycommand': 'get_sub_visibility()',
                        'types': []},
 'get_time_length': {'command': 'get_time_length',
                     'comment': 'MPlayer command: get_time_length\nMPlayer doc: get_time_length\nrint out the length of the current file in seconds.\n',
                     'pycommand': 'get_time_length()',
                     'types': []},
 'get_time_pos': {'command': 'get_time_pos',
                  'comment': 'MPlayer command: get_time_pos\nMPlayer doc: get_time_pos\nrint out the current position in the file in seconds, as float.\n',
                  'pycommand': 'get_time_pos()',
                  'types': []},
 'get_video_bitrate': {'command': 'get_video_bitrate',
                       'comment': 'MPlayer command: get_video_bitrate\nMPlayer doc: get_video_bitrate\nrint out the video bitrate of the current file.\n',
                       'pycommand': 'get_video_bitrate()',
                       'types': []},
 'get_video_codec': {'command': 'get_video_codec',
                     'comment': 'MPlayer command: get_video_codec\nMPlayer doc: get_video_codec\nrint out the video codec name of the current file.\n',
                     'pycommand': 'get_video_codec()',
                     'types': []},
 'get_video_resolution': {'command': 'get_video_resolution',
                          'comment': 'MPlayer command: get_video_resolution\nMPlayer doc: get_video_resolution\nrint out the video resolution of the current file.\n',
                          'pycommand': 'get_video_resolution()',
                          'types': []},
 'get_vo_fullscreen': {'command': 'get_vo_fullscreen',
                       'comment': 'MPlayer command: get_vo_fullscreen\nMPlayer doc: get_vo_fullscreen\nrint out fullscreen status (1 == fullscreened, 0 == windowed).\n',
                       'pycommand': 'get_vo_fullscreen()',
                       'types': []},
 'hue': {'command': 'hue',
         'comment': 'MPlayer command: hue Integer [Integer]\nMPlayer doc: hue <value> [abs]\net/adjust video parameter.\nf [abs] is not given or is zero, modifies parameter by <value>.\nf [abs] is non-zero, parameter is set to <value>.\nvalue> is in the range [-100, 100].\n',
         'pycommand': 'hue(<int>[, <int>])',
         'types': ['int', 'int']},
 'key_down_event': {'command': 'key_down_event',
                    'comment': 'MPlayer command: key_down_event Integer\nMPlayer doc: key_down_event <value>\nnject <value> key code event into MPlayer.\n',
                    'pycommand': 'key_down_event(<int>)',
                    'types': ['int']},
 'loadfile': {'command': 'loadfile',
              'comment': 'MPlayer command: loadfile String [Integer]\nMPlayer doc: loadfile <file|url> <append>\noad the given file/URL, stopping playback of the current file/URL.\nf <append> is nonzero playback continues and the file/URL is\nppended to the current playlist instead.\n',
              'pycommand': 'loadfile(<str>[, <int>])',
              'types': ['str', 'int']},
 'loadlist': {'command': 'loadlist',
              'comment': 'MPlayer command: loadlist String [Integer]\nMPlayer doc: loadlist <file> <append>\noad the given playlist file, stopping playback of the current file.\nf <append> is nonzero playback continues and the playlist file is\nppended to the current playlist instead.\n',
              'pycommand': 'loadlist(<str>[, <int>])',
              'types': ['str', 'int']},
 'loop': {'command': 'loop',
          'comment': 'MPlayer command: loop Integer [Integer]\nMPlayer doc: loop <value> [abs]\ndjust/set how many times the movie should be looped. -1 means no loop,\nnd 0 forever.\n',
          'pycommand': 'loop(<int>[, <int>])',
          'types': ['int', 'int']},
 'mute': {'command': 'mute',
          'comment': 'MPlayer command: mute [Integer]\nMPlayer doc: mute [value]\noggle sound output muting or set it to [value] when [value] >= 0\n1 == on, 0 == off).\n',
          'pycommand': 'mute([<int>])',
          'types': ['int']},
 'osd': {'command': 'osd',
         'comment': 'MPlayer command: osd [Integer]\nMPlayer doc: osd [level]\noggle OSD mode or set it to [level] when [level] >= 0.\n',
         'pycommand': 'osd([<int>])',
         'types': ['int']},
 'osd_show_progression': {'command': 'osd_show_progression',
                          'comment': 'MPlayer command: osd_show_progression\nMPlayer doc: osd_show_progression\nhow the progression bar, the elapsed time and the total duration of the\novie on the OSD.\n',
                          'pycommand': 'osd_show_progression()',
                          'types': []},
 'osd_show_property_te': {'command': 'osd_show_property_te',
                          'comment': 'MPlayer command: osd_show_property_te String [Integer] [Integer]',
                          'pycommand': 'osd_show_property_te(<str>[, <int>][, <int>])',
                          'types': ['str', 'int', 'int']},
 'osd_show_text': {'command': 'osd_show_text',
                   'comment': 'MPlayer command: osd_show_text String [Integer] [Integer]\nMPlayer doc: osd_show_text <string> [duration] [level]\nhow <string> on the OSD.\n',
                   'pycommand': 'osd_show_text(<str>[, <int>][, <int>])',
                   'types': ['str', 'int', 'int']},
 'panscan': {'command': 'panscan',
             'comment': 'MPlayer command: panscan Float [Integer]\nMPlayer doc: panscan <-1.0 - 1.0> | <0.0 - 1.0> <abs>\nncrease or decrease the pan-and-scan range by <value>, 1.0 is the maximum.\negative values decrease the pan-and-scan range.\nf <abs> is != 0, then the pan-and scan range is interpreted as an\nbsolute range.\n',
             'pycommand': 'panscan(<float>[, <int>])',
             'types': ['float', 'int']},
 'pause': {'command': 'pause',
           'comment': 'MPlayer command: pause\nMPlayer doc: pause\nause/unpause the playback.\n',
           'pycommand': 'pause()',
           'types': []},
 'pt_step': {'command': 'pt_step',
             'comment': 'MPlayer command: pt_step Integer [Integer]\nMPlayer doc: pt_step <value> [force]\no to the next/previous entry in the playtree. The sign of <value> tells\nhe direction.  If no entry is available in the given direction it will do\nothing unless [force] is non-zero.\n',
             'pycommand': 'pt_step(<int>[, <int>])',
             'types': ['int', 'int']},
 'pt_up_step': {'command': 'pt_up_step',
                'comment': 'MPlayer command: pt_up_step Integer [Integer]\nMPlayer doc: pt_up_step <value> [force]\nimilar to pt_step but jumps to the next/previous entry in the parent list.\nseful to break out of the inner loop in the playtree.\n',
                'pycommand': 'pt_up_step(<int>[, <int>])',
                'types': ['int', 'int']},
 'quit': {'command': 'quit',
          'comment': 'MPlayer command: quit [Integer]\nMPlayer doc: quit [value]\nuit MPlayer. The optional integer [value] is used as the return code\nor the mplayer process (default: 0).\n',
          'pycommand': 'quit([<int>])',
          'types': ['int']},
 'run': {'command': 'run',
         'comment': 'MPlayer command: run String\nMPlayer doc: run <string>\nun <string> with properties expanded as shell command. In OSD menu\nonsole mode stdout and stdin are through the video output driver.\nroperty expansion happens in the same way as for osd_show_property_text.\note: MPlayer will do property expansion on anything of the form\n{somevar} before it is passed to the shell.\nhis means that you cannot use this syntax for anything you actually\nant the shell to handle, though any other form like $somevar will\ne passed on to and processed by the shell.\n',
         'pycommand': 'run(<str>)',
         'types': ['str']},
 'saturation': {'command': 'saturation',
                'comment': 'MPlayer command: saturation Integer [Integer]\nMPlayer doc: saturation <value> [abs]\net/adjust video parameter.\nf [abs] is not given or is zero, modifies parameter by <value>.\nf [abs] is non-zero, parameter is set to <value>.\nvalue> is in the range [-100, 100].\n',
                'pycommand': 'saturation(<int>[, <int>])',
                'types': ['int', 'int']},
 'screenshot': {'command': 'screenshot',
                'comment': 'MPlayer command: screenshot [Integer] [Integer]\nMPlayer doc: screenshot <value>\nake a screenshot. Requires the screenshot filter to be loaded.\n   0 Take a single screenshot.\n   1 Start/stop taking screenshot of each frame.\n',
                'pycommand': 'screenshot([<int>][, <int>])',
                'types': ['int', 'int']},
 'seek': {'command': 'seek',
          'comment': 'MPlayer command: seek Float [Integer] [Integer]\nMPlayer doc: seek <value> [type]\neek to some place in the movie.\n   0 is a relative seek of +/- <value> seconds (default).\n   1 is a seek to <value> % in the movie.\n   2 is a seek to an absolute position of <value> seconds.\n',
          'pycommand': 'seek(<float>[, <int>][, <int>])',
          'types': ['float', 'int', 'int']},
 'seek_chapter': {'command': 'seek_chapter',
                  'comment': 'MPlayer command: seek_chapter Integer [Integer]\nMPlayer doc: seek_chapter <value> [type]\neek to the start of a chapter.\n   0 is a relative seek of +/- <value> chapters (default).\n   1 is a seek to chapter <value>.\n',
                  'pycommand': 'seek_chapter(<int>[, <int>])',
                  'types': ['int', 'int']},
 'set_mouse_pos': {'command': 'set_mouse_pos',
                   'comment': "MPlayer command: set_mouse_pos Integer Integer\nMPlayer doc: set_mouse_pos <x> <y>\nells MPlayer the coordinates of the mouse in the window.\nhis command doesn't move the mouse!\n",
                   'pycommand': 'set_mouse_pos(<int>, <int>)',
                   'types': ['int', 'int']},
 'set_property': {'command': 'set_property',
                  'comment': 'MPlayer command: set_property String String\nMPlayer doc: set_property <property> <value>\net a property.\n',
                  'pycommand': 'set_property(<str>, <str>)',
                  'types': ['str', 'str']},
 'set_property_osd': {'command': 'set_property_osd',
                      'comment': 'MPlayer command: set_property_osd String String',
                      'pycommand': 'set_property_osd(<str>, <str>)',
                      'types': ['str', 'str']},
 'speed_incr': {'command': 'speed_incr',
                'comment': 'MPlayer command: speed_incr Float\nMPlayer doc: speed_incr <value>\ndd <value> to the current playback speed.\n',
                'pycommand': 'speed_incr(<float>)',
                'types': ['float']},
 'speed_mult': {'command': 'speed_mult',
                'comment': 'MPlayer command: speed_mult Float\nMPlayer doc: speed_mult <value>\nultiply the current speed by <value>.\n',
                'pycommand': 'speed_mult(<float>)',
                'types': ['float']},
 'speed_set': {'command': 'speed_set',
               'comment': 'MPlayer command: speed_set Float\nMPlayer doc: speed_set <value>\net the speed to <value>.\n',
               'pycommand': 'speed_set(<float>)',
               'types': ['float']},
 'step_property': {'command': 'step_property',
                   'comment': 'MPlayer command: step_property String [Float] [Integer]\nMPlayer doc: step_property <property> [value] [direction]\nhange a property by value, or increase by a default if value is\not given or zero. The direction is reversed if direction is less\nhan zero.\n',
                   'pycommand': 'step_property(<str>[, <float>][, <int>])',
                   'types': ['str', 'float', 'int']},
 'step_property_osd': {'command': 'step_property_osd',
                       'comment': 'MPlayer command: step_property_osd String [Float] [Integer]',
                       'pycommand': 'step_property_osd(<str>[, <float>][, <int>])',
                       'types': ['str', 'float', 'int']},
 'stop': {'command': 'stop',
          'comment': 'MPlayer command: stop\nMPlayer doc: stop\ntop playback.\n',
          'pycommand': 'stop()',
          'types': []},
 'sub_alignment': {'command': 'sub_alignment',
                   'comment': 'MPlayer command: sub_alignment [Integer]\nMPlayer doc: sub_alignment [value]\noggle/set subtitle alignment.\n   0 top alignment\n   1 center alignment\n   2 bottom alignment\n',
                   'pycommand': 'sub_alignment([<int>])',
                   'types': ['int']},
 'sub_delay': {'command': 'sub_delay',
               'comment': 'MPlayer command: sub_delay Float [Integer]\nMPlayer doc: sub_delay <value> [abs]\ndjust the subtitle delay by +/- <value> seconds or set it to <value>\neconds when [abs] is nonzero.\n',
               'pycommand': 'sub_delay(<float>[, <int>])',
               'types': ['float', 'int']},
 'sub_demux': {'command': 'sub_demux',
               'comment': "MPlayer command: sub_demux [Integer]\nMPlayer doc: sub_demux [value]\nisplay subtitle specified by [value] for subtitles from DVD or embedded\nn media file. The [value] is corresponding to ID_SUBTITLE_ID values\neported by '-identify'. If [value] is -1, will turn off subtitle display.\nf [value] is omitted or less than -1, will cycle all DVD subs or embedded subs\nforward or backward respectively).\n",
               'pycommand': 'sub_demux([<int>])',
               'types': ['int']},
 'sub_file': {'command': 'sub_file',
              'comment': "MPlayer command: sub_file [Integer]\nMPlayer doc: sub_file [value]\nisplay subtitle specified by [value] for file subs. The [value] is\norresponding to ID_FILE_SUB_ID values reported by '-identify'.\nf [value] is -1, will turn off subtitle display.\nf [value] is omitted or less than -1, will cycle all file subs\nforward or backward respectively).\n",
              'pycommand': 'sub_file([<int>])',
              'types': ['int']},
 'sub_load': {'command': 'sub_load',
              'comment': 'MPlayer command: sub_load String\nMPlayer doc: sub_load <subtitle_file>\noads subtitles from <subtitle_file>.\n',
              'pycommand': 'sub_load(<str>)',
              'types': ['str']},
 'sub_log': {'command': 'sub_log',
             'comment': 'MPlayer command: sub_log\nMPlayer doc: sub_log\nogs the current or last displayed subtitle together with filename\nnd time information to ~/.mplayer/subtitle_log. Intended purpose\ns to allow convenient marking of bogus subtitles which need to be\nixed while watching the movie.\n',
             'pycommand': 'sub_log()',
             'types': []},
 'sub_pos': {'command': 'sub_pos',
             'comment': 'MPlayer command: sub_pos Integer [Integer]\nMPlayer doc: sub_pos <value> [abs]\ndjust/set subtitle position.\n',
             'pycommand': 'sub_pos(<int>[, <int>])',
             'types': ['int', 'int']},
 'sub_remove': {'command': 'sub_remove',
                'comment': 'MPlayer command: sub_remove [Integer]\nMPlayer doc: sub_remove [value]\nf the [value] argument is present and non-negative, removes the subtitle\nile with index [value]. If the argument is omitted or negative, removes\nll subtitle files.\n',
                'pycommand': 'sub_remove([<int>])',
                'types': ['int']},
 'sub_scale': {'command': 'sub_scale',
               'comment': 'MPlayer command: sub_scale Float [Integer]\nMPlayer doc: sub_scale <value> [abs]\ndjust the subtitle size by +/- <value> or set it to <value> when [abs]\ns nonzero.\n',
               'pycommand': 'sub_scale(<float>[, <int>])',
               'types': ['float', 'int']},
 'sub_select': {'command': 'sub_select',
                'comment': 'MPlayer command: sub_select [Integer]\nMPlayer doc: sub_select [value]\nisplay subtitle with index [value]. Turn subtitle display off if\nvalue] is -1 or greater than the highest available subtitle index.\nycle through the available subtitles if [value] is omitted or less\nhan -1 (forward or backward respectively).\nupported subtitle sources are -sub options on the command\nine, VOBsubs, DVD subtitles, and Ogg and Matroska text streams.\nhis command is mainly for cycling all subtitles, if you want to set\n specific subtitle, use sub_file, sub_vob, or sub_demux.\n',
                'pycommand': 'sub_select([<int>])',
                'types': ['int']},
 'sub_source': {'command': 'sub_source',
                'comment': 'MPlayer command: sub_source [Integer]\nMPlayer doc: sub_source [source]\nisplay first subtitle from [source]. Here [source] is an integer:\nUB_SOURCE_SUBS   (0) for file subs\nUB_SOURCE_VOBSUB (1) for VOBsub files\nUB_SOURCE_DEMUX  (2) for subtitle embedded in the media file or DVD subs.\nf [source] is -1, will turn off subtitle display.\nf [value] is omitted or less than -1, will cycle between the first subtitle\nf each currently available source (forward or backward respectively).\n',
                'pycommand': 'sub_source([<int>])',
                'types': ['int']},
 'sub_step': {'command': 'sub_step',
              'comment': 'MPlayer command: sub_step Integer [Integer]\nMPlayer doc: sub_step <value>\ntep forward in the subtitle list by <value> steps or backwards if <value>\ns negative.\n',
              'pycommand': 'sub_step(<int>[, <int>])',
              'types': ['int', 'int']},
 'sub_visibility': {'command': 'sub_visibility',
                    'comment': 'MPlayer command: sub_visibility [Integer]\nMPlayer doc: sub_visibility [value]\noggle/set subtitle visibility.\n',
                    'pycommand': 'sub_visibility([<int>])',
                    'types': ['int']},
 'sub_vob': {'command': 'sub_vob',
             'comment': "MPlayer command: sub_vob [Integer]\nMPlayer doc: sub_vob [value]\nisplay subtitle specified by [value] for VOBsubs. The [value] is\norresponding to ID_VOBSUB_ID values reported by '-identify'.\nf [value] is -1, will turn off subtitle display.\nf [value] is omitted or less than -1, will cycle all VOBsubs\nforward or backward respectively).\n",
             'pycommand': 'sub_vob([<int>])',
             'types': ['int']},
 'switch_angle': {'command': 'switch_angle',
                  'comment': 'MPlayer command: switch_angle [Integer]\nMPlayer doc: switch_angle [value] (DVDs only)\nwitch to the DVD angle with the ID [value]. Cycle through the\nvailable angles if [value] is omitted or negative.\n',
                  'pycommand': 'switch_angle([<int>])',
                  'types': ['int']},
 'switch_audio': {'command': 'switch_audio',
                  'comment': 'MPlayer command: switch_audio [Integer]\nMPlayer doc: switch_audio [value] (currently MPEG*, AVI, Matroska and streams handled by libavformat)\nwitch to the audio track with the ID [value]. Cycle through the\nvailable tracks if [value] is omitted or negative.\n',
                  'pycommand': 'switch_audio([<int>])',
                  'types': ['int']},
 'switch_ratio': {'command': 'switch_ratio',
                  'comment': 'MPlayer command: switch_ratio [Float]\nMPlayer doc: switch_ratio [value]\nhange aspect ratio at runtime. [value] is the new aspect ratio expressed\ns a float (e.g. 1.77778 for 16/9), or special value -1 to reset to\nriginal aspect ratio (ditto if [value] is missing), or special value 0\no disable automatic movie aspect ratio compensation.\nhere might be problems with some video filters.\n',
                  'pycommand': 'switch_ratio([<float>])',
                  'types': ['float']},
 'switch_title': {'command': 'switch_title',
                  'comment': 'MPlayer command: switch_title [Integer]\nMPlayer doc: switch_title [value] (DVDNAV only)\nwitch to the DVD title with the ID [value]. Cycle through the\nvailable titles if [value] is omitted or negative.\n',
                  'pycommand': 'switch_title([<int>])',
                  'types': ['int']},
 'switch_vsync': {'command': 'switch_vsync',
                  'comment': 'MPlayer command: switch_vsync [Integer]\nMPlayer doc: switch_vsync [value]\noggle vsync (1 == on, 0 == off). If [value] is not provided,\nsync status is inverted.\n',
                  'pycommand': 'switch_vsync([<int>])',
                  'types': ['int']},
 'teletext_add_dec': {'command': 'teletext_add_dec',
                      'comment': 'MPlayer command: teletext_add_dec String',
                      'pycommand': 'teletext_add_dec(<str>)',
                      'types': ['str']},
 'teletext_go_link': {'command': 'teletext_go_link',
                      'comment': 'MPlayer command: teletext_go_link Integer\nMPlayer doc: teletext_go_link <1-6>\nollow given link on current teletext page.\n',
                      'pycommand': 'teletext_go_link(<int>)',
                      'types': ['int']},
 'tv_last_channel': {'command': 'tv_last_channel',
                     'comment': 'MPlayer command: tv_last_channel\nMPlayer doc: tv_last_channel\net the current TV channel to the last one.\n',
                     'pycommand': 'tv_last_channel()',
                     'types': []},
 'tv_set_brightness': {'command': 'tv_set_brightness',
                       'comment': 'MPlayer command: tv_set_brightness Integer [Integer]\nMPlayer doc: tv_set_brightness <-100 - 100> [abs]\net TV tuner brightness or adjust it if [abs] is set to 0.\n',
                       'pycommand': 'tv_set_brightness(<int>[, <int>])',
                       'types': ['int', 'int']},
 'tv_set_channel': {'command': 'tv_set_channel',
                    'comment': 'MPlayer command: tv_set_channel String\nMPlayer doc: tv_set_channel <channel>\net the current TV channel.\n',
                    'pycommand': 'tv_set_channel(<str>)',
                    'types': ['str']},
 'tv_set_contrast': {'command': 'tv_set_contrast',
                     'comment': 'MPlayer command: tv_set_contrast Integer [Integer]\nMPlayer doc: tv_set_contrast <-100 -100> [abs]\net TV tuner contrast or adjust it if [abs] is set to 0.\n',
                     'pycommand': 'tv_set_contrast(<int>[, <int>])',
                     'types': ['int', 'int']},
 'tv_set_freq': {'command': 'tv_set_freq',
                 'comment': 'MPlayer command: tv_set_freq Float\nMPlayer doc: tv_set_freq <frequency in MHz>\net the TV tuner frequency.\n',
                 'pycommand': 'tv_set_freq(<float>)',
                 'types': ['float']},
 'tv_set_hue': {'command': 'tv_set_hue',
                'comment': 'MPlayer command: tv_set_hue Integer [Integer]\nMPlayer doc: tv_set_hue <-100 - 100> [abs]\net TV tuner hue or adjust it if [abs] is set to 0.\n',
                'pycommand': 'tv_set_hue(<int>[, <int>])',
                'types': ['int', 'int']},
 'tv_set_norm': {'command': 'tv_set_norm',
                 'comment': 'MPlayer command: tv_set_norm String\nMPlayer doc: tv_set_norm <norm>\net the TV tuner norm (PAL, SECAM, NTSC, ...).\n',
                 'pycommand': 'tv_set_norm(<str>)',
                 'types': ['str']},
 'tv_set_saturation': {'command': 'tv_set_saturation',
                       'comment': 'MPlayer command: tv_set_saturation Integer [Integer]\nMPlayer doc: tv_set_saturation <-100 - 100> [abs]\net TV tuner saturation or adjust it if [abs] is set to 0.\n',
                       'pycommand': 'tv_set_saturation(<int>[, <int>])',
                       'types': ['int', 'int']},
 'tv_start_scan': {'command': 'tv_start_scan',
                   'comment': 'MPlayer command: tv_start_scan\nMPlayer doc: tv_start_scan\ntart automatic TV channel scanning.\n',
                   'pycommand': 'tv_start_scan()',
                   'types': []},
 'tv_step_chanlist': {'command': 'tv_step_chanlist',
                      'comment': 'MPlayer command: tv_step_chanlist\nMPlayer doc: tv_step_chanlist\nhange channel list.\n',
                      'pycommand': 'tv_step_chanlist()',
                      'types': []},
 'tv_step_channel': {'command': 'tv_step_channel',
                     'comment': 'MPlayer command: tv_step_channel Integer\nMPlayer doc: tv_step_channel <channel>\nelect next/previous TV channel.\n',
                     'pycommand': 'tv_step_channel(<int>)',
                     'types': ['int']},
 'tv_step_freq': {'command': 'tv_step_freq',
                  'comment': 'MPlayer command: tv_step_freq Float\nMPlayer doc: tv_step_freq <frequency offset in MHz>\net the TV tuner frequency relative to current value.\n',
                  'pycommand': 'tv_step_freq(<float>)',
                  'types': ['float']},
 'tv_step_norm': {'command': 'tv_step_norm',
                  'comment': 'MPlayer command: tv_step_norm\nMPlayer doc: tv_step_norm\nhange TV norm.\n',
                  'pycommand': 'tv_step_norm()',
                  'types': []},
 'use_master': {'command': 'use_master',
                'comment': 'MPlayer command: use_master\nMPlayer doc: use_master\nwitch volume control between master and PCM.\n',
                'pycommand': 'use_master()',
                'types': []},
 'vo_border': {'command': 'vo_border',
               'comment': 'MPlayer command: vo_border [Integer]\nMPlayer doc: vo_border [value]\noggle/set borderless display.\n',
               'pycommand': 'vo_border([<int>])',
               'types': ['int']},
 'vo_fullscreen': {'command': 'vo_fullscreen',
                   'comment': 'MPlayer command: vo_fullscreen [Integer]\nMPlayer doc: vo_fullscreen [value]\noggle/set fullscreen mode.\n',
                   'pycommand': 'vo_fullscreen([<int>])',
                   'types': ['int']},
 'vo_ontop': {'command': 'vo_ontop',
              'comment': 'MPlayer command: vo_ontop [Integer]\nMPlayer doc: vo_ontop [value]\noggle/set stay-on-top.\n',
              'pycommand': 'vo_ontop([<int>])',
              'types': ['int']},
 'vo_rootwin': {'command': 'vo_rootwin',
                'comment': 'MPlayer command: vo_rootwin [Integer]\nMPlayer doc: vo_rootwin [value]\noggle/set playback on the root window.\n',
                'pycommand': 'vo_rootwin([<int>])',
                'types': ['int']},
 'vobsub_lang': {'command': 'vobsub_lang',
                 'comment': 'MPlayer command: vobsub_lang [Integer]\nMPlayer doc: vobsub_lang\nhis is a stub linked to sub_select for backwards compatibility.\n',
                 'pycommand': 'vobsub_lang([<int>])',
                 'types': ['int']},
 'volume': {'command': 'volume',
            'comment': 'MPlayer command: volume Float [Integer]\nMPlayer doc: volume <value> [abs]\nncrease/decrease volume or set it to <value> if [abs] is nonzero.\n',
            'pycommand': 'volume(<float>[, <int>])',
            'types': ['float', 'int']}}